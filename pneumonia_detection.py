# -*- coding: utf-8 -*-
"""Pneumonia detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kSa8hYwDak_gaW2b85s5XAJlwsih1FUV
"""

# !pip install numpy
# !pip install tensorflow
# !pip install opencv-python
# !pip install pandas
# !pip install glob2
# !pip install matplotlib

# !pip install random2
# !pip install pathlib
# !pip install os-sys
# !pip install keras

import numpy as np
import tensorflow as tf
import pandas as pd
import cv2
import glob
import matplotlib.pyplot as plt
import random
from random import randint
from pathlib import Path
import os
# print(os.listdir("../input"))

import os # Import the os module to use its functions

print(os.listdir("/content/drive/MyDrive/chest_xray"))

print(os.listdir("/content/drive/MyDrive/chest_xray"))

train_dir = '/content/drive/MyDrive/chest_xray/train'
test_dir =  '/content/drive/MyDrive/chest_xray/test'
X = []
Y = []

#Loop through the training and test folders, as well as the 'NORMAL' and 'PNEUMONIA' subfolders and append all images into array X.  Append the classification (0 or 1) into array Y.

for fileName in os.listdir(train_dir + "/NORMAL"):
        img = cv2.imread(train_dir + "/NORMAL/" + fileName)
        if img is not None:
            Y.append(0)
            img = cv2.resize(img,(64,64))
            X.append(img)

for fileName in os.listdir(train_dir + "/PNEUMONIA"):
        img = cv2.imread(train_dir + "/PNEUMONIA/" + fileName)
        if img is not None:
            Y.append(1)
            img = cv2.resize(img,(64,64))
            X.append(img)

for fileName in os.listdir(test_dir + "/NORMAL"):
        img = cv2.imread(test_dir + "/NORMAL/" + fileName)
        if img is not None:
            Y.append(0)
            img = cv2.resize(img,(64,64))
            X.append(img)

for fileName in os.listdir(test_dir + "/PNEUMONIA"):
        img = cv2.imread(test_dir + "/PNEUMONIA/" + fileName)
        if img is not None:
            Y.append(1)
            img = cv2.resize(img,(64,64))
            X.append(img)

print("This is an example of a patient X-ray who does not have pneumonia:")
normal = cv2.imread(test_dir + "/NORMAL/IM-0003-0001.jpeg")
plt.axis('off')
plt.imshow(normal)

print("This is an example of an X-ray of a patient diagnosed with pneumonia:")
pnumonia = cv2.imread(test_dir + "/PNEUMONIA/person15_virus_46.jpeg")
plt.axis('off')
plt.imshow(pnumonia)

#Data visualization

pos = 0
neg = 0

for i in range(len(Y)):  # Start iterating from 0
    if Y[i] == 1:       # Directly check the value in Y
        pos = pos + 1
    else:
        neg = neg + 1



objects = ('Positive', 'Negative')
y_pos = np.arange(len(objects))
performance = [pos,neg]

plt.bar(y_pos, performance, align='center', alpha=0.5)
plt.xticks(y_pos, objects)
plt.ylabel('Count')
plt.title('X-Ray Diagnosis')

plt.show()

print("There are " +str(pos) +" pneumonia positive X-ray's in our data")
print("There are " +str(neg) +" pneumonia negative X-ray's in our data")

import numpy as np
import tensorflow as tf
import pandas as pd
import cv2
import glob
import matplotlib.pyplot as plt
import random
from random import randint
from pathlib import Path
import os
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

# Loading data
print(os.listdir("/content/drive/MyDrive/chest_xray"))
train_dir = '/content/drive/MyDrive/chest_xray/train'
test_dir =  '/content/drive/MyDrive/chest_xray/test'
X = []
Y = []

def load_images_from_folder(folder, label):
    for fileName in os.listdir(folder):
        img = cv2.imread(folder + "/" + fileName)
        if img is not None:
            Y.append(label)
            img = cv2.resize(img, (64, 64))
            X.append(img)

load_images_from_folder(train_dir + "/NORMAL", 0)
load_images_from_folder(train_dir + "/PNEUMONIA", 1)
load_images_from_folder(test_dir + "/NORMAL", 0)
load_images_from_folder(test_dir + "/PNEUMONIA", 1)

# Data normalization
X = np.array(X) / 255.0
X = (X - np.average(X, 0)) / np.std(X, 0)
Y = to_categorical(Y, num_classes=2)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)

# Model definition using TensorFlow 2.x
def create_cnn_model():
    model = tf.keras.Sequential([
        tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Dropout(0.25),

        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Dropout(0.25),

        tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.BatchNormalization(),
        tf.keras.layers.Dropout(0.25),

        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(2, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

model = create_cnn_model()

history = model.fit(X_train, Y_train, epochs=20, batch_size=64, validation_data=(X_test, Y_test))

# Plot the training and validation accuracy and loss at each epoch
loss = history.history['loss']
val_loss = history.history['val_loss']
accuracy = history.history['accuracy']
val_accuracy = history.history['val_accuracy']
epochs = range(len(accuracy))

plt.plot(epochs, accuracy, 'r', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()

# Evaluate the model on test data
test_loss, test_accuracy = model.evaluate(X_test, Y_test)
print(f"Test accuracy: {test_accuracy * 100:.2f}%")

"""Save the Trained Model"""

model.save('/content/drive/MyDrive/chest_xray/cnn_model.h5')

""" Load the Saved Model"""

model = tf.keras.models.load_model('/content/drive/MyDrive/chest_xray/cnn_model.h5')

"""Preprocess the Uploaded Image"""

def preprocess_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (64, 64))
    img = img / 255.0
    img = (img - np.average(img)) / np.std(img)
    img = np.expand_dims(img, axis=0)  # Expand dimensions to match the input shape
    return img

""" Create a Function for Prediction"""

def predict_pneumonia(image_path, model):
    img = preprocess_image(image_path)
    prediction = model.predict(img)
    if np.argmax(prediction, axis=1)[0] == 1:
        return "yes"
    else:
        return "no"

"""Full Code for Uploading an Image and Making a Prediction"""

import numpy as np
import tensorflow as tf
import cv2
import os
from tensorflow.keras.models import load_model

# Load the saved model
model = load_model('/content/drive/MyDrive/chest_xray/cnn_model.h5')

def preprocess_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (64, 64))
    img = img / 255.0
    img = (img - np.average(img)) / np.std(img)
    img = np.expand_dims(img, axis=0)  # Expand dimensions to match the input shape
    return img

def predict_pneumonia(image_path, model):
    img = preprocess_image(image_path)
    prediction = model.predict(img)
    if np.argmax(prediction, axis=1)[0] == 1:
        return "yes"
    else:
        return "no"

# Example usage:
image_path = ''  # Replace with the path to your image
result = predict_pneumonia(image_path, model)
print(f"Does the X-ray show pneumonia? {result}")